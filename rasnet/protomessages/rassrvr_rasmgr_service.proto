/*
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
 *2014 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 */

syntax = "proto3";
//The first line must specify the syntax.

package rasnet.service;

option cc_generic_services = false;
import "common_service.proto";

message DatabaseRights
{
    bool read = 1;
    bool write = 2;
}

// Message sent by RasManager to a RasServer assigning the client represented
// by the client id to it.
message AllocateClientReq
{
    string clientId = 1;
    string sessionId = 2;
    string capabilities = 3;
}

message DeallocateClientReq
{
    string clientId = 1;
    string sessionId = 2;
}

message CloseServerReq {  string serverId = 1; }

message ClientStatusReq
{
    string clientId = 1;
    string sessionId = 2;
}

message ClientStatusRepl
{
    enum Status {
        ALIVE = 0;
        DEAD = 1;
    }
    Status status = 1;
}

message ServerStatusReq {}

message ServerStatusRepl {  uint32 clientQueueSize = 1; }

// Service offered by a RasServer to the parent RasManager
service RasServerService
{
    // Allocate a client to this RasServer
    rpc AllocateClient(AllocateClientReq) returns (rasnet.service.Void);
    rpc DeallocateClient(DeallocateClientReq) returns (rasnet.service.Void);

    // Close this RasServer
    rpc Close(CloseServerReq) returns (rasnet.service.Void);

    // Get the status of a client running on this RasServer
    rpc GetClientStatus(ClientStatusReq) returns (ClientStatusRepl);
    // Get the status of this RasServer
    rpc GetServerStatus(ServerStatusReq) returns (ServerStatusRepl);
}
