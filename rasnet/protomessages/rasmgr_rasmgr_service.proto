/*
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013,
 *2014 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 */

syntax = "proto3";
//The first line must specify the syntax.

package rasnet.service;
option java_package = "org.rasdaman.rasnet.service";

option cc_generic_services = false;
option java_generic_services = false;

import "common_service.proto";

message GetRemoteServerRequest {
    // The user name of the user that requested a server
    string user_name = 1;

    // The password hash of the user that requested a server
    string password_hash =  2;

    // The name of the database that the user has requested
    string database_name = 3;

    // The token of the user, if it exists
    string token = 4;
    
    // Hostname to which the original client connected to
    string hostname = 5;
}

message GetRemoteServerReply {
    // The client session id assigned by the remote rasmgr
    string client_session_id = 1;

    // DB session ID associated with this transaction
    string db_session_id = 2;

    // Host name of the assigned server
    string server_host_name = 3;

    // The port of the assigned server
    uint32 server_port = 4;
}

message ReleaseServerRequest {
    // The client id assigned by the remote rasmgr
    string client_session_id = 1;

    // The ID of the DB session we want to release
    string db_session_id = 2;
}

service RasmgrRasmgrService{
    rpc TryGetRemoteServer(GetRemoteServerRequest) returns (GetRemoteServerReply);
    rpc ReleaseServer(ReleaseServerRequest) returns (rasnet.service.Void);
}
