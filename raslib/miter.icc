/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/**
 * SOURCE: miter.cc
 *
 * MODULE: raslib
 * CLASS:  r_Miter
 *
*/

inline char *
r_Miter::nextCell()
{
    // return the current cell
    char *retVal = currCell;
    if (done)
        return retVal;

    // increment adresses
    currCell += incArrIter[0].inc;
    lowCount++;
    if (lowCount == incArrIter[0].repeat)
    {
        lowCount = 0;
        // increment other dimensions
        r_Dimension i;
        for (i = 1; i < areaIter->dimension(); i++)
        {
            incArrIter[i].curr++;
            currCell += incArrIter[i].inc;
            if (incArrIter[i].curr < incArrIter[i].repeat)
                break;                  // no overflow in this dimension
            else
                incArrIter[i].curr = 0; // overflow in this dimension
        }
        if (i == areaIter->dimension())
        {
            done = true;                // overflow in last dimension
            currCell = retVal;
        }
    }
    return retVal;
}

inline bool
r_Miter::isDone()
{
    return done;
}
