/*
* This file is part of rasdaman community.
*
* Rasdaman community is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Rasdaman community is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
*
* Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
rasdaman GmbH.
*
* For more information please see <http://www.rasdaman.org>
* or contact Peter Baumann via <baumann@rasdaman.com>.
*/
/**
 * SOURCE: miterf.icc
 *
 * MODULE: raslib
 * CLASS:  r_MiterFloat
 *
*/

#include <math.h>

//
// r_FixedPointNumber
//

inline bool r_FixedPointNumber::stepForwardFlag(const r_FixedPointNumber &f)
{
    intPart += f.intPart;
    fracPart += f.fracPart;
    if (fracPart & carryPos)
    {
        intPart++;
        fracPart &= fracMask;
        return true;
    }
    return false;
}
inline r_Range r_FixedPointNumber::getIntPart()
{
    return intPart;
}

//
// r_MiterFloat
//

inline char *r_MiterFloat::nextCell()
{
    if (done)
        return currentCell;

    iter_desc *id = iterDesc + dim - 1;
    currentCell = iterDesc[dim - 1].cell;

    r_Dimension i = dim;
    while (i > 0)
    {
        --id->countSteps;
        if (id->countSteps)
        {
            // one more step in this dimension
            if (id->pos.stepForwardFlag(id->step))
                id->cell += id->dimStep;

            id->cell += id->scaleStep;
            break;
        }
        else
        {
            // we are finished with this dimension
            id->pos = id->min;
            id->countSteps = id->maxSteps;
            --id;
            --i;
        }
    }

    if (i < dim)
    {
        if (i == 0)
        {
            done = true;
        }
        else
        {
            for (r_Dimension j = i; j < dim; j++)
                iterDesc[j].cell = iterDesc[i - 1].cell;
        }
    }
    return currentCell;
}

inline bool r_MiterFloat::isDone()
{
    return done;
}
