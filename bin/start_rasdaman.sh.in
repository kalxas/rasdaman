#!/bin/sh
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003 - 2017 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#

#
# start_rasdaman.sh - start rasdaman server complex
#
# SYNTAX
#    start_rasdaman.sh [servers...]
#
# DESCRIPTION
#    This script starts rasdaman.
#    Which rasdaman servers are started depends on the 'server' name(s) provided:
#    * If no server name is provided then the environment variable $RASSERVERS is
#      inspected to obtain a list of servers to be started. If $RASSERVERS is not
#      set, then all rasdaman servers defined will be attempted to start.
#    * If at least one parameter is provided then all parameters
#      will be treated as a server name which is tried to be started.
#
#    To log in to the server, the external variable $RASLOGIN is expected to hold
#    an ID string (see rasdaman manual). If not found, a desperate last attempt is
#    made to login as rasadmin/rasadmin. If this fails, no servers are started at all.
#
# PRECONDITIONS
#    - need to have a rasdaman admin login either from $RASLOGIN or as rasadmin/rasadmin
#    - need to run with an effective user id that allows to write into log/
#    - need to have a valid rasdaman installation
#

# --- CONSTANTS -----------------------------------------------------

PROG=$(basename "$0")

# load configuration file if it exists
#config_file="/etc/default/rasdaman"
#[ -f "$config_file" ] && . "$config_file"

VERSION="@VERSION_FULL@"
BUILD="@GIT_HASH@"

RC_OK=0       # everything went fine
RC_ERROR=1    # something went wrong
RC_HELP=2

RASMGR_PORT=7001

# binaries
rasmgr_bin="@bindir@rasmgr"
rasserver_bin="@bindir@rasserver"
rascontrol_bin="@bindir@rascontrol"

petascope_props="@sysconfdir@petascope.properties"
secore_props="@sysconfdir@secore.properties"

log_path="@logdir@"
war_path="@pkgdatadir@war"

# base DBMS used by petascope
PETASCOPEDB=@petascopedb@
ENABLE_JAVA=@ENABLE_JAVA@

# rasmgr port
DEFAULT_RASMGR_PORT=7001
[ -z "$RASMGR_PORT" ] && RASMGR_PORT="$DEFAULT_RASMGR_PORT"

# rasadmin/rasadmin
DEFAULT_RASCONTROL_LOGIN=rasadmin:d293a15562d3e70b6fdc5ee452eaed40
[ -z "$RASLOGIN" ] && RASLOGIN=$DEFAULT_RASCONTROL_LOGIN
export RASLOGIN

# set default memory limit of 4GB for embedded petascope
[ -z "$JAVA_OPTS" ] && JAVA_OPTS="-Xmx4000m"

log()  { echo "$PROG: $*"; }
logn() { printf "%s" "$PROG: $*"; }
error(){ echo "$PROG: $*" >&2; exit $RC_ERROR; }
check(){ [ $? ] && echo "ok." || echo "failed."; }

sleep --help 2>&1 | grep -q GNU && GNU_SLEEP=true
get_sleep_value() { [ $GNU_SLEEP ] && echo "$1" || echo "$2"; }

# Check if the last executed command is successfull
# $1 - process name
# $2 = 1 - exit with error if failed to start
# return - pid if started successfully
check_process()
{
    # get exit code and pid of the last executed command
    exit_code=$?
    pid=$!
    # wait 1 second for the process to establish
    sleep 1

    if [ $exit_code -ne 0 ]; then
        echo "failed; please check the logs for more information."
        [ "$2" = "1" ] && exit $RC_ERROR
    elif ! ps -Ao pid | grep "$pid\b" > /dev/null 2>&1; then
        echo "failed, pid $pid not found; please check the logs in $log_path for more information."
        [ "$2" = "1" ] && exit $RC_ERROR
    else
        echo "ok, pid $pid."
    fi
}

# Read the property of a value by input key from input properties file
get_property_value()
{
    # $1 is path to input properties file (e.g: /opt/rasdaman/etc/petascope.properties).
    # $2 is the key of a property in this file which needs to get the value of this key.
    properties_file="$1"
    key="$2"
    # only grep key=value line not commented line (e.g: #key=value)
    grep "^$key=" "$properties_file" | sed -e 's/.*=//' -e 's/^[ \t]*//'
}

# Return non-zero if port is available
# $1: the port to check
check_port_available()
{
    port="$1"
    if type fuser > /dev/null 2>&1; then
        fuser -s -n tcp "$port" > /dev/null 2>&1
    elif type lsof > /dev/null 2>&1; then
        lsof -i ":$port" > /dev/null 2>&1
    elif type netstat > /dev/null 2>&1; then
        netstat -lntu | grep "LISTEN" | awk '{ print $4 }' | grep -q ":$port\$"
    elif type ss > /dev/null 2>&1; then
        ss -lntu | grep "LISTEN" | awk '{ print $5 }' | grep -q ":$port\$"
    else
        return 1 # assume it's available
    fi
}

set_rasmgr_port()
{
    case "$1" in
      ''|*[!0-9]*)  error "Invalid port specified: $1; expected a positive number <= 65535.";;
      *)            RASMGR_PORT="$1";;
    esac
    if [ "$RASMGR_PORT" -gt 0 ] && [ "$RASMGR_PORT" -lt 65535 ]; then
      : # all good
    else
      error "Invalid port specified: $1; expected a positive number <= 65535."
    fi
}

get_rasmgr_process() {
    prefix="^$USER"
    [ -z "$USER" ] && prefix="" # USER is empty in docker, so above would fail
    ps -Ao user,pid,args | grep -E "$prefix +[[:digit:]]+ +$rasmgr_bin --port $RASMGR_PORT"
}

#------ start embedded petascope/secore if needed --------------------------

# Start embedded tomcat from values in properties file
# $1: the path to properties file (e.g: /opt/rasdaman/etc/petascope.properties).
# $2: the web application name (e.g: petascope).
# $3: the war file of application (e.g: rasdaman.war).
start_embedded()
{
    props_path="$1"
    app_name="$2"
    war_file_name="$3"
    war_file="$war_path/$war_file_name"

    if [ -f "$props_path" ]; then
        # check if java-server is embedded/external
        java_server=$(get_property_value "$props_path" "java_server")
        # if java-server is embedded and the war file exists then attempt starting it
        if [ "$java_server" = "embedded" ] && [ -f "$war_file" ]; then
            # Get the embedded port for server
            server_port=$(get_property_value "$props_path" "server.port")
            logn "  starting $app_name on port $server_port... "
            check_port_available "$server_port"
            if [ $? -ne 0 ]; then
                log_file="$(get_property_value "$props_path" "log4j.appender.rollingFile.rollingPolicy.ActiveFileName")"
                if [ -z "$log_file" ]; then
                    log_file="$(get_property_value "$props_path" "log4j.appender.rollingFile.File")"
                fi
                nohup java $JAVA_OPTS -jar "$war_file" >> "$log_file" 2>&1 &
                if [ -n "$log_file" ]; then
                    if type timeout > /dev/null 2>&1; then
                        printf "initializing... "
                        # wait until a string appears in the petascope.log;
                        # main solution is from https://superuser.com/a/900134,
                        # plus we added the timeout of 60 seconds in case of error,
                        # this way it is not necessary to also grep for error strings
                        ( tail -F -n0 --quiet "$log_file" 2> /dev/null & ) | timeout 60 grep -q "Started ApplicationMain"
                        if [ $? -eq 124 ]; then
                            # the grep timed out
                            printf "warning: initialization may have failed, check %s... " "$log_file"
                        fi
                    fi
                else
                    printf "warning: could not determine petascope.log path from %s... " "$props_path"
                fi
                check_process "$app_name"
            else
                echo "failed, port $server_port is occupied."
            fi
        fi
    elif [ "$ENABLE_JAVA" != "OFF" ]; then
        log "Warning - cannot start embedded $app_name, $props_path not found."
    fi
}


# --- ACTION ------------------------------------------------------

usage()
{
    cat <<EOF
Start the rasdaman server if it is not already running.

Usage
  $PROG [OPTION]...


Options

  --service <svc>       start a particular service <svc> only; allowed values 
                        for <svc> are: core (rasmgr + rasservers), petascope.
                        By default all services are started.

  -p, --port <port>     specify the port on which rasmgr will listen. By default
                        this is 7001. It is recommended to avoid changing this
                        value unless really necessary.
  
  --allow-root          allow starting rasdaman (i.e. running this script) with
                        root; otherwise, by default start_rasdaman.sh will exit
                        with an error if it is executed with root.

  <N1> <N2> ...         start only the specified rasservers, as named in 
                        etc/rasmgr.conf. By default all configured rasservers 
                        are started.

  -h, --help            show this message and exit.


Environment variables

  This script will use various environment variables, if they are set before it
  is executed:

  - RASMGR_PORT - the port on which rasmgr will listen when started, and to
    which client applications will connect in order to send queries to rasdaman.
    This variable will be overrided by the value of option --port, if 
    specified. By default if none are specified, the port is set to 7001.

  - RASLOGIN - rasdaman admin credentials which will be used for 
    starting rasmgr non-interactively. See the rascontrol docs for details on 
    the format  and how is this setting used. If not set, the script defaults to  
    using rasadmin/rasadmin credentials; the documentation provides guidelines 
    on how to change these defaults.

  - JAVA_OPTS - options passed on to the java command when used to start
    the OGC frontend of rasdaman (petascope) if it is configured for
    embedded deployment. If not set, it defaults to "-Xmx4000m"
EOF
    exit $RC_HELP
}

set_all_options()
{
    start_rasmgr_rasservers=$1
    start_embedded_petascope=$1
    start_all_services=$1
}

log "starting rasdaman $VERSION build $BUILD...";

set_all_options true
service_already_reset=false
allow_root=false

servers=""
# Iterate all input arguments (it can contain server names (N1 N2 ...) and some options (--service petascope ...)
option=""
for i in "$@"; do
    if [ -n "$option" ]; then
        # Get option value for --service
        if [ "$option" = "--service" ]; then
            # reset the start options only once; this allows to specify multiple
            # --service values
            if [ $service_already_reset = false ]; then
                set_all_options false
                service_already_reset=true
            fi
            case "$i" in
              core)      start_rasmgr_rasservers=true;;
              petascope) start_embedded_petascope=true;;
              *)         error "Value for option $option must be core|petascope. Given: $i";;
            esac
        elif [ "$option" = "--port" ] || [ "$option" = "-p" ]; then
            set_rasmgr_port "$i"
        fi
        option=""
    elif [ -n "$i" ]; then
        option=""
        case $i in
          --service)      option="$i";;
          --port|-p)      option="$i";;
          --allow-root)   allow_root=true;;
          --help|-h)      usage;;
          -*)             error "unknown option: $i";;
          *)              servers="$servers $i";;
        esac
    fi
done

# --- check user running this script --------------------------------

if [ "$allow_root" = false ]; then
  user_id=$(id -u)
  if [ "$user_id" -eq 0 ]; then
    error "starting rasdaman with root user is not recommended, please run $PROG \
with a non-root user. If you insist to run with root, $PROG must be executed with \
the --allow-root option."
  fi
fi

if [ -n "$http_proxy" ]; then
  log "Note: env variable http_proxy is set to \"$http_proxy\", and generally it breaks proper \
function of rasdaman; it will be unset before starting rasdaman processes."
  unset -v http_proxy
fi

# --- start rasmgr --------------------------------------------------

# check if rasmgr exists
[ -f "$rasmgr_bin" ] || \
    error "$rasmgr_bin not found, rasdaman cannot be started."

# here we want to put all log files
if [ ! -d "$log_path" ]; then
  log "$log_path not found, will be created."
  mkdir "$log_path" || error "Failed creating log dir, invalid permissions?"
  chmod 750 "$log_path" # readable only for owner and group
fi
cd "$log_path" || error "$log_path not found."

# check if we can actually write anything here
[ -w . ] || \
    error "User $USER has no write permissions in $log_path, rasdaman cannot be started."

if [ "$start_rasmgr_rasservers" = true ]; then

    # check if rasmgr is already running first of all
    if get_rasmgr_process > /dev/null; then
        log "rasdaman is currently running, nothing to do."
        exit $RC_OK
    fi

    # clear previous log file
    rm -f nohup.out


    # --- start rasmgr -------------------------------------------------
    # start rasdaman server manager as a daemon; log will go into nohup.out
    logn "  starting rasmgr... "
    nohup "$rasmgr_bin" --port "$RASMGR_PORT" > nohup.out 2>&1 &
    check_process "rasmgr" 1

    # wait for rasmgr to initialize
    count=1
    timeout=6 # sec
    while [ $count -le $timeout ]; do
        "$rascontrol_bin" --port "$RASMGR_PORT" -e -q -x list srv 2>&1 | grep -q "Command failed"
        if [ $? -ne 0 ]; then
            break
        fi
        sleep 1
        count=$((count+1))
    done
    if [ $count -gt $timeout ]; then
        log "  Warning: rasmgr does not respond to commands, it may have failed to start properly."
    fi

    # --- start servers ------------------------------------------------
    # if no input servers provided, check environmental variable $RASSERVERS
    if [ -z "$servers" ]; then
        servers="$RASSERVERS"
    fi

    # ...then spawn server workers
    if [ -n "$servers" ]; then
        for SRV in $servers; do
            logn "  starting server $SRV... "
            "$rascontrol_bin" --port "$RASMGR_PORT" -e -q -x up srv "$SRV" || exit $!
            check
        done
    else
        logn "  starting all rasdaman servers... "
        "$rascontrol_bin" --port "$RASMGR_PORT" -e -q -x up srv -all || exit $!
        check
    fi

fi

# start embedded petascope
if [ "$start_embedded_petascope" = true ]; then
    start_embedded "$petascope_props" "petascope" "rasdaman.war"
fi

log "done."

exit $RC_OK

# --- END ACTION ----------------------------------------------------
