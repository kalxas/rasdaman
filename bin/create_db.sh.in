#!/bin/sh
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#
#
# PURPOSE:
#   This script initializes the RASBASE schema in postgres or sqlite
#   (depending on how rasdaman was compiled), and creates the standard
#   rasdaman types.
#
########################################################################

# --- constants & routines

# script name
PROG=$(basename "$0")
VERSION="@VERSION_FULL@"
BUILD="@GIT_HASH@"

# script return codes
RC_OK=0
RC_ERROR=1

BASEDBMS=@basedbms@
BASEDBMS_SQLITE=sqlite
BASEDBMS_PGSQL=pgsql

rasserver_bin="@bindir@rasserver"

# default database name
# (if you change this, then a _lot_ of tools and configs
# have to get the new database name explicitly, so you may
# want to seriously consider whether you really want this)
DATABASE_NAME=RASBASE

DBCONN="@dbconn@"

log()  { echo "$PROG: $*"; }
logn() { printf "%s" "$PROG: $*"; }
error(){ echo "$PROG: $*" >&2; exit $RC_ERROR; }
check(){ [ $? ] && echo "ok." || echo "failed."; }

execute_query() {
  $rasserver_bin -q "$1" -d "$DBCONN" > /dev/null || \
    error "failed executing query: $1"
}

log "rasdaman $VERSION build $BUILD on base DBMS $BASEDBMS"

# --- checking preconditions

# - Can I find utilities?
if [ "$BASEDBMS" = "$BASEDBMS_PGSQL" ]; then
    psql --help 1>/dev/null 2>&1 || \
        error "Cannot find psql - PostgreSQL not installed or PATH variable does not contain PostgreSQL bin path?"
fi

# --- action: create database directory & cluster if needed

if [ "$BASEDBMS" = "$BASEDBMS_PGSQL" ]; then
    logn "PostgreSQL database generation... "
    createdb $DATABASE_NAME > /dev/null || error "createdb failed creating PostgreSQL database $DATABASE_NAME."
    echo "ok."
fi

# - check if user has rights to create SQLite database
if [ "$BASEDBMS" = "$BASEDBMS_SQLITE" ]; then
  datadir=$(dirname "$DBCONN")
  if [ ! -d "$datadir" ]
  then
    logn "filestorage directory '$datadir' not found, creating... "
    mkdir -p "$datadir" || error "failed creating filestorage directory '$datadir'."
    echo "ok."
  fi
  if [ ! -w "$datadir" ]
  then
    error "Error: User '$USER' has no write permissions in '$datadir', rasdaman database cannot be created."
  fi
  if [ ! -x "$datadir" ]
  then
    error "Error: User '$USER' has no execute permissions in '$datadir' (and/or parent directories), rasdaman database cannot be created."
  fi
fi

# - rasdaman part

log "rasdaman dictionary initialization... "

logn "  creating RASBASE... "
$rasserver_bin -c --connect "$DBCONN" > /dev/null || \
  error "failed creating RASBASE."
echo "ok."

logn "  inserting standard types... "

# 2D greyscale image of unlimited spatial extent
execute_query "CREATE TYPE GreyImage as char mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE GreySet as set ( GreyImage )" > /dev/null

execute_query "CREATE TYPE BoolImage as bool mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE BoolSet as set ( BoolImage )" > /dev/null

execute_query "CREATE TYPE RGBPixel as (red char, green char, blue char)" > /dev/null
execute_query "CREATE TYPE RGBImage as RGBPixel mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE RGBSet as set ( RGBImage )" > /dev/null

execute_query "CREATE TYPE GreyCube as char mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE GreySet3 as set ( GreyCube )"  > /dev/null

execute_query "CREATE TYPE BoolString as bool mdarray [ x ]"  > /dev/null
execute_query "CREATE TYPE BoolSet1 as set ( BoolString )"  > /dev/null

execute_query "CREATE TYPE BoolCube as bool mdarray [ x, y, z ]"  > /dev/null
execute_query "CREATE TYPE BoolSet3 as set ( BoolCube )"  > /dev/null

execute_query "CREATE TYPE GreyString as char mdarray [ x ]"  > /dev/null
execute_query "CREATE TYPE GreySet1 as set ( GreyString )"  > /dev/null

execute_query "CREATE TYPE OctetString as octet mdarray [ x ]"  > /dev/null
execute_query "CREATE TYPE OctetSet1 as set ( OctetString )"  > /dev/null

execute_query "CREATE TYPE OctetImage as octet mdarray [ x, y ]"  > /dev/null
execute_query "CREATE TYPE OctetSet as set ( OctetImage )"  > /dev/null

execute_query "CREATE TYPE OctetCube as octet mdarray [ x, y, z ]"  > /dev/null
execute_query "CREATE TYPE OctetSet3 as set ( OctetCube )"  > /dev/null

execute_query "CREATE TYPE ShortString as short mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE ShortSet1 as set ( ShortString )" > /dev/null

execute_query "CREATE TYPE ShortImage as short mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE ShortSet as set ( ShortImage )" > /dev/null

execute_query "CREATE TYPE ShortCube as short mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE ShortSet3 as set ( ShortCube )" > /dev/null

execute_query "CREATE TYPE UShortString as unsigned short mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE UShortSet1 as set ( UShortString )" > /dev/null

execute_query "CREATE TYPE UShortImage as unsigned short mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE UShortSet as set ( UShortImage )" > /dev/null

execute_query "CREATE TYPE UShortCube as unsigned short mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE UShortSet3 as set ( UShortCube )" > /dev/null

execute_query "CREATE TYPE LongString as long mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE LongSet1 as set ( LongString )" > /dev/null

execute_query "CREATE TYPE LongImage as long mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE LongSet as set ( LongImage )" > /dev/null

execute_query "CREATE TYPE LongCube as long mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE LongSet3 as set ( LongCube )" > /dev/null

execute_query "CREATE TYPE ULongString as unsigned long mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE ULongSet1 as set ( ULongString )" > /dev/null

execute_query "CREATE TYPE ULongImage as unsigned long mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE ULongSet as set ( ULongImage )" > /dev/null

execute_query "CREATE TYPE ULongCube as unsigned long mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE ULongSet3 as set ( ULongCube )" > /dev/null

execute_query "CREATE TYPE RGBString as RGBPixel mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE RGBSet1 as set ( RGBString )" > /dev/null

execute_query "CREATE TYPE RGBCube as RGBPixel mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE RGBSet3 as set ( RGBCube )" > /dev/null

execute_query "CREATE TYPE FloatString as float mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE FloatSet1 as set ( FloatString )" > /dev/null

execute_query "CREATE TYPE FloatImage as float mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE FloatSet as set ( FloatImage )" > /dev/null

execute_query "CREATE TYPE FloatCube as float mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE FloatSet3 as set ( FloatCube )" > /dev/null

execute_query "CREATE TYPE FloatCube4 as float mdarray [ x, y, z, t ]" > /dev/null
execute_query "CREATE TYPE FloatSet4 as set ( FloatCube4 )" > /dev/null

execute_query "CREATE TYPE DoubleString as double mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE DoubleSet1 as set ( DoubleString )" > /dev/null

execute_query "CREATE TYPE DoubleImage as double mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE DoubleSet as set ( DoubleImage )" > /dev/null

execute_query "CREATE TYPE DoubleCube as double mdarray [ x, y, z ]" > /dev/null
execute_query "CREATE TYPE DoubleSet3 as set ( DoubleCube )" > /dev/null

execute_query "CREATE TYPE Gauss1 as CFloat32 mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE GaussSet1 as set ( Gauss1 )" > /dev/null

execute_query "CREATE TYPE Gauss2 as CFloat64 mdarray [ x ]" > /dev/null
execute_query "CREATE TYPE GaussSet2 as set ( Gauss2 )" > /dev/null

execute_query "CREATE TYPE Gauss1Image as CFloat32 mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE Gauss1Set as set ( Gauss1Image )" > /dev/null

execute_query "CREATE TYPE Gauss2Image as CFloat64 mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE Gauss2Set as set ( Gauss2Image )" > /dev/null

execute_query "CREATE TYPE CInt16Image as CInt16 mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE CInt16Set as set ( CInt16Image )" > /dev/null

execute_query "CREATE TYPE CInt32Image as CInt32 mdarray [ x, y ]" > /dev/null
execute_query "CREATE TYPE CInt32Set as set ( CInt32Image )" > /dev/null
echo "ok."

# --- action end 

log "done."
exit $RC_OK

# --- end of script

