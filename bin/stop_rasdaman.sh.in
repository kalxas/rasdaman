#!/bin/sh
#
# This file is part of rasdaman community.
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.      
#
#
# stop_rasdaman.sh - shut down rasdaman server complex
#
# SYNTAX
#       stop_rasdaman.sh
#
# DESCRIPTION
#    This script stops rasdaman.
#    First, all server processes are terminated. Then, the server
#    manager (rasmgr) is shut down.
#    To log in to the server, the external variable $RASLOGIN is expected to hold
#    an ID string (see rasdaman manual). If not found, a desperate last attempt is
#    made to login as rasadmin/rasadmin. If this fails, no servers are stopped at all.
#
# BE CAREFUL
#    By stopping rasdaman, all open transactions are aborted,
#    and their contents will be irretrievably lost!
#
# PRECONDITIONS
#    - need to have a rasdaman admin login either from $RASLOGIN or as rasadmin/rasadmin
#    - no open transactions or databases, they will be killed and transactions aborted
#

# --- CONSTANTS -----------------------------------------------------

PROG=$(basename "$0")

# load configuration file if it exists
#config_file="/etc/default/rasdaman"
#[ -f "$config_file" ] && . "$config_file"

VERSION="@VERSION_FULL@"
BUILD="@GIT_HASH@"

RC_OK=0
RC_ERROR=1
RC_HELP=2

# binaries
rasmgr_bin="@bindir@rasmgr"
rasserver_bin="@bindir@rasserver"
rascontrol_bin="@bindir@rascontrol"

petascope_props="@sysconfdir@petascope.properties"
war_path="@pkgdatadir@war"

ENABLE_JAVA=@ENABLE_JAVA@

# rasmgr port
DEFAULT_RASMGR_PORT=7001
[ -z "$RASMGR_PORT" ] && RASMGR_PORT="$DEFAULT_RASMGR_PORT"

# rasadmin/rasadmin
DEFAULT_RASCONTROL_LOGIN=rasadmin:d293a15562d3e70b6fdc5ee452eaed40
[ -z "$RASLOGIN" ] && RASLOGIN=$DEFAULT_RASCONTROL_LOGIN
export RASLOGIN

log()  { echo "$PROG: $*"; }
logn() { printf "%s" "$PROG: $*"; }
error(){ echo "$PROG: $*" >&2; exit $RC_ERROR; }
check(){ [ $? ] && echo "ok." || echo "failed."; }

sleep --help 2>&1 | grep -q GNU && GNU_SLEEP=true
get_sleep_value() { [ $GNU_SLEEP ] && echo "$1" || echo "$2"; }

# give process matching time to disappear
# $1 - process path to match in pgrep
# $2 - timeout in seconds
# $3 - [optional] grep the output of pgrep
# return - 0 if the process shutdown successfully, otherwise 1
wait_for_process_to_shutdown()
{
    proc_path="$1"
    timeout="$2"
    timeout_tenths=$((timeout * 10))

    max_count=$(get_sleep_value $timeout_tenths "$timeout")
    sleep_sec=$(get_sleep_value 0.1 1)
    count=0
    while [ $count -lt "$max_count" ]; do
        if [ -n "$3" ]; then
          ps -Ao pid,args | grep "[^]]$proc_path" | grep -q "$3" > /dev/null 2>&1
        else
          ps -Ao pid,args | grep "[^]]$proc_path" > /dev/null 2>&1
        fi
        [ $? -ne 0 ] && break # no process found, no need to wait more
        count=$((count+1))
        sleep "$sleep_sec"    # otherwise, wait 0.1 (or 1) seconds and try again
    done
    # return 0 if count < max_count, otherwise 1
    [ $count -lt "$max_count" ]
}

# should usually follow a call to wait_for_process_to_shutdown, based on the
# value of $? it prints ok or tries to force-stop the process with pid $pid
# $1 - process name to be checked in case of failure to stop
check_process_and_force_shutdown_if_needed()
{
    if [ $? -ne 0 ]; then
        if [ "$force" = true ]; then
            kill -9 "$pid"
            echo "failed, had to be force-stopped."
        else
            echo "failed, please check the $1 process manually, or stop rasdaman with the --force option."
        fi
    else
        echo "ok."
    fi
}

# Read the property of a value by input key from input properties file
get_property_value() {
    # $1 is path to input properties file (e.g: /opt/rasdaman/etc/petascope.properties).
    # $2 is the key of a property in this file which needs to get the value of this key.
    properties_file="$1"
    key="$2"
    # only grep key=value line not commented line (e.g: #key=value)
    grep "^$key=" "$properties_file" | sed -e 's/.*=//' -e 's/^[ \t]*//'
}

set_rasmgr_port()
{
    case "$1" in
      ''|*[!0-9]*)  error "Invalid port specified: $1; expected a positive number <= 65535.";;
      *)            RASMGR_PORT="$1";;
    esac
    [ "$RASMGR_PORT" -gt 0 -a "$RASMGR_PORT" -lt 65535 ] || \
        error "Invalid port specified: $1; expected a positive number <= 65535."
}

get_rasmgr_process() {
    prefix="^$USER"
    [ -z "$USER" ] && prefix="" # USER is empty in docker, so above would fail
    ps -Ao user,pid,args | grep -E "$prefix +[[:digit:]]+ +$rasmgr_bin --port $RASMGR_PORT"
}

# --- ACTION ------------------------------------------------------

usage()
{
    cat <<EOF
rasdaman $VERSION build $BUILD

Stop the rasdaman server if it is currently running.

Usage

  $PROG [OPTION]...


Options

  --service <svc>       stop a particular service <svc> only; allowed values 
                        for <svc> are: core, petascope, rasfed. By default all 
                        services are stopped.

  -p, --port <port>     specify the port on which rasmgr listens. If rasdaman
                        was started with a port different from the standard 7001
                        then the port must be specified with this option as well.

  -f, --force           stop_rasdaman.sh will wait for some time for rasdaman
                        processes to exit. If they have not exited during this
                        time of 10-15 seconds, and this option is specified, then
                        the hanging rasdaman process will be force-stopped with a
                        SIGKILL signal.

                        Warning: Use this option carefully, as it may lead to data
                        corruption. It is best to first check the process and its
                        logs manually, to determine why is it hanging.

  -h, --help            show this message and exit.


Environment variables

  This script will use various environment variables, if they are set before it
  is executed:

  - RASMGR_PORT - the port on which rasmgr will listen when started, and to
    which client applications will connect in order to send queries to rasdaman.
    This variable will be overrided by the value of option --port, if 
    specified. By default if none are specified, the port is set to 7001.

  - RASLOGIN - rasdaman admin credentials which will be used for 
    starting rasmgr non-interactively. See the rascontrol docs for details on 
    the format  and how is this setting used. If not set, the script defaults to  
    using rasadmin/rasadmin credentials; the documentation provides guidelines 
    on how to change these defaults.

  - JAVA_OPTS - options passed on to the java command when used to start
    the OGC frontend of rasdaman (petascope) if it is configured for
    embedded deployment. If not set, it defaults to "-Xmx4000m"
EOF
    exit $RC_HELP
}

set_all_options()
{
    stop_rasmgr_rasservers=$1
    stop_embedded_petascope=$1
}

set_all_options true
service_already_reset=false
force=false

# Iterate all input arguments (--service petascope ...)
option=""
for i in "$@"; do
    if [ -n "$option" ]; then
        # Get option value for --service
        if [ "$option" = "--service" ]; then
            # reset the start options only once; this allows to specify multiple
            # --service values
            if [ $service_already_reset = false ]; then
                set_all_options false
                service_already_reset=true
            fi
            case "$i" in
              core)      stop_rasmgr_rasservers=true;;
              petascope) stop_embedded_petascope=true;;
              *)         error "Value for option $option must be core|petascope. Given: $i";;
            esac
        elif [ "$option" = "--port" ] || [ "$option" = "-p" ]; then
            set_rasmgr_port "$i"
        fi
        option=""
    else
        option=""
        case $i in
          --service)     option="$i";;
          --port|-p)     option="$i";;
          --force|-f)    force=true;;
          --help|-h)     usage;;
          *) error "unknown option: $i";;
        esac
    fi
done

log "stopping rasdaman $VERSION build $BUILD... "

# Check if it should stop embedded tomcat
if [ "$stop_embedded_petascope" = true ]; then
    war_file_name="rasdaman.war"
    war_file="$war_path/$war_file_name"

    if [ -f "$petascope_props" ]; then
        # check if java-server is embedded/external
        java_server=$(get_property_value "$petascope_props" "java_server")
        if [ "$java_server" = "embedded" ]; then
            logn "  stopping petascope... "
            pid="$(ps -Ao pid,args | grep "[^]]$war_file\b" | awk '{print $1}' 2> /dev/null)"
            if [ -n "$pid" ]; then
                kill "$pid"
                wait_for_process_to_shutdown "$war_file" 10
                check_process_and_force_shutdown_if_needed "$war_file_name"
            else
                echo "already stopped."
            fi
        fi
    elif [ "$ENABLE_JAVA" != "OFF" ]; then
        log "  warning - cannot stop petascope, $petascope_props not found."
    fi
fi

if [ "$stop_rasmgr_rasservers" = true ]; then

    # --- stop rasdaman servers ---------------------------------------

    # check if rasmgr is already running first of all
    if ! get_rasmgr_process > /dev/null; then
        log "rasdaman is already down, nothing to do."
        exit $RC_OK
    fi

    logn "  stopping rasserver processes... "
    "$rascontrol_bin" --port "$RASMGR_PORT" -e -q -x down srv -all -kill
    check
    wait_for_process_to_shutdown "$rasserver_bin" 10 "mgrport $RASMGR_PORT"
    rasservers_stopped=$?

    # --- stop rasmgr -------------------------------------------------

    # finally shut down the server manager
    logn "  "
    "$rascontrol_bin" --port "$RASMGR_PORT" -e -q -x down host -all
    wait_for_process_to_shutdown "$rasmgr_bin" 15 "port $RASMGR_PORT"
    if [ $? -ne 0 ]; then
        if [ "$force" = true ]; then
            # failed to shutdown rasmgr, try with kill -9
            for pid in $(ps -Ao pid,args | grep "[^]]$rasmgr_bin\b" | grep "$RASMGR_PORT" | awk '{print $1}' 2> /dev/null); do
                kill -9 "$pid"
                log "  rasmgr with pid $pid had to be force-stopped."
            done
        else
            log "  failed stopping rasmgr, please check the rasmgr process manually, or stop rasdaman with the --force option."
        fi
    fi

    # force stop rasservers if they weren't stopped before
    if [ "$rasservers_stopped" -ne 0 -a "$force" = true ]; then
        for pid in $(ps -Ao pid,args | grep "[^]]$rasserver_bin\b" | grep "mgrport $RASMGR_PORT" | awk '{print $1}' 2> /dev/null); do
            kill -9 "$pid"
            log "  rasserver with pid $pid had to be force-stopped."
        done
    fi
fi

log "done."

exit $RC_OK

# --- END ACTION ----------------------------------------------------
